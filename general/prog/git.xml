<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY git-download-http
  "http://git-core.googlecode.com/files/git-&git-version;.tar.gz">
  <!ENTITY git-download-ftp  " ">
  <!ENTITY git-md5sum        "d94314eb49622a945b22595b36b7fc47">
  <!ENTITY git-size          "3.4 MB">
  <!ENTITY git-buildsize     "140 MB">
  <!ENTITY git-time          "0.7 SBU">
]>

<sect1 id="git" xreflabel="git-&git-version;">
  <?dbhtml filename="git.html"?>

  <sect1info>
    <othername>$LastChangedBy$</othername>
    <date>$Date$</date>
  </sect1info>

  <title>Git-&git-version;</title>

  <indexterm zone="git">
    <primary sortas="a-git">Git</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to Git</title>

    <para><application>Git</application> is a free and open source, distributed
    version control system designed to handle everything from small to very
    large projects with speed and efficiency. Every
    <application>Git</application> clone is a full-fledged repository with
    complete history and full revision tracking capabilities, not dependent on
    network access or a central server. Branching and merging are fast and easy
    to do. <application>Git</application> is used for version control of files,
    much like tools such as <application>Mercurial</application>,
    <application>Bazaar</application>, <xref linkend="subversion"/>,
    <xref linkend="cvs"/>, <application>Perforce</application>, and
    <application>Team Foundation Server</application>.</para>

    &lfs70_checked;

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Download (HTTP): <ulink url="&git-download-http;"/></para>
      </listitem>
      <listitem>
        <para>Download (FTP): <ulink url="&git-download-ftp;"/></para>
      </listitem>
      <listitem>
        <para>Download MD5 sum: &git-md5sum;</para>
      </listitem>
      <listitem>
        <para>Download size: &git-size;</para>
      </listitem>
      <listitem>
        <para>Estimated disk space required: &git-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimated build time: &git-time;</para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Git Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required"><xref linkend="python"/></para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended"><xref linkend="curl"/> (without libcurl you won't
    be able to use <application>Git</application> over http, https, ftp or
    ftps)</para>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional"><xref linkend="tk"/> (gitk, a simple git repository
    viewer, uses tk at runtime)</para>
    <para><ulink
    url="http://www.methods.co.nz/asciidoc/">AsciiDoc</ulink> and
    <xref linkend="xmlto"/> are required to create the man pages.</para>

    <para condition="html" role="usernotes">User Notes:
    <ulink url="&blfs-wiki;/git"/></para>
  </sect2>

  <sect2 role="installation">
    <title>Installation of Git</title>

    <para>Install <application>Git</application> by running the following
    commands:</para>

<screen><userinput>./configure -&#45;prefix=/usr -&#45;with-gitconfig=/etc/gitconfig &amp;&amp;
make</userinput></screen>

    <para>If you have installed <ulink
    url="http://www.methods.co.nz/asciidoc/">AsciiDoc</ulink> and
    <xref linkend="xmlto"/> and you wish to create the man pages:</para>

<screen><userinput>make man</userinput></screen>

    <para>To check the results, issue: <command>make test</command>.</para>

    <para>Now, as the <systemitem class="username">root</systemitem>
    user:</para>

<screen role="root"><userinput>make install</userinput></screen>

    <para>If you created the man pages, install them:</para>

<screen role="root"><userinput>make install-man</userinput></screen>
  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <para><option>-&#45;with-gitconfig=/etc/gitconfig</option>: This sets
    <filename>/etc/gitconfig</filename> as the file that stores the default,
    system wide, <application>Git</application> settings.</para>
  </sect2>

  <sect2 role="configuration">
    <title>Configuring Git</title>

    <sect3 id="git-config">
      <title>Config Files</title>
      <para><filename>~/.gitconfig</filename> and
      <filename>/etc/gitconfig</filename></para>

      <indexterm zone="git git-config">
        <primary sortas="e-AA.gitconfig">~/.gitconfig</primary>
      </indexterm>

      <indexterm zone="git git-config">
        <primary sortas="e-etc-gitconfig">/etc/gitconfig</primary>
      </indexterm>
    </sect3>

    <sect3><title>Configuration Information</title>

      <para>If you want to use <command>git svn</command> you will to install
      <xref linkend="subversion"/> and its perl bindings.</para>

      <para>To be able to use git to pull from a https source you need to tell
      it where the ssl certificates are. To install the SSL certificate bundle,
      see <xref linkend="curl"/>. To set the location of the SSL certificate
      bundle for all users, as the
      <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>git config --system http.sslcainfo /etc/ssl/certs/ca-bundle.crt</userinput></screen>

      <para>Alternatively, to define http.sslcainfo only for yourself:</para>

<screen><userinput>git config --global http.sslcainfo /etc/ssl/certs/ca-bundle.crt</userinput></screen>
    </sect3>
  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>git, git-cvsserver, gitk, git-receive-pack, git-shell,
        git-upload-archive and git-upload-pack.</seg>
        <seg>/usr/libexec/git-core, /usr/share/git-core, /usr/share/git-gui,
        /usr/share/gitk and /usr/share/gitweb</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="git-prog">
        <term><command>git</command></term>
        <listitem>
          <para>is the stupid content tracker.</para>
          <indexterm zone="git git-prog">
            <primary sortas="b-git">git</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-cvsserver">
        <term><command>git-cvsserver</command></term>
        <listitem>
          <para>is a CVS server emulator for git.</para>
          <indexterm zone="git git-cvsserver">
            <primary sortas="b-git-cvsserver">git-cvsserver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gitk">
        <term><command>gitk</command></term>
        <listitem>
          <para>is a git repository browser (needs <xref linkend="tk"/>).</para>
          <indexterm zone="git gitk">
            <primary sortas="b-gitk">gitk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-receive-pack">
        <term><command>git-receive-pack</command></term>
        <listitem>
          <para>is invoked by <command>git send-pack</command> and updates the
          repository with the information fed from the remote end.</para>
          <indexterm zone="git git-receive-pack">
            <primary sortas="b-git-receive-pack">git-receive-pack</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-shell">
        <term><command>git-shell</command></term>
        <listitem>
          <para>is a login shell for SSH accounts to provide restricted Git
          access.</para>
          <indexterm zone="git git-shell">
            <primary sortas="b-git-shell">git-shell</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-upload-archive">
        <term><command>git-upload-archive</command></term>
        <listitem>
          <para>is invoked by <command>git archive --remote</command> and sends
          a generated archive to the other end over the git protocol.</para>
          <indexterm zone="git git-upload-archive">
            <primary sortas="b-git-upload-archive">git-upload-archive</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-upload-pack">
        <term><command>git-upload-pack</command></term>
        <listitem>
          <para>is invoked by <command>git fetch-pack</command>, it discovers
          what objects the other side is missing, and sends them after
          packing.</para>
          <indexterm zone="git git-upload-pack">
            <primary sortas="b-git-upload-pack">git-upload-pack</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
</sect1>
