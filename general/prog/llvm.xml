<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY llvm-download-http "http://llvm.org/releases/&llvm-version;/llvm-&llvm-version;.src.tar.xz">
  <!ENTITY llvm-download-ftp  " ">
  <!ENTITY llvm-md5sum        "f2093e98060532449eb7d2fcfd0bc6c6">
  <!ENTITY llvm-size          "17 MB">
  <!ENTITY llvm-buildsize     "1.2 GB (with Clang, add 7.2 GB for tests)">
  <!ENTITY llvm-time          "44 SBU (with Clang, add 13 SBU for tests)">

  <!ENTITY clang-download-http "http://llvm.org/releases/&llvm-version;/cfe-&llvm-version;.src.tar.xz">
  <!ENTITY clang-md5sum        "29e1d86bee422ab5345f5e9fb808d2dc">
  <!ENTITY clang-size          "10 MB">

  <!ENTITY rt-version                "&llvm-version;">
  <!ENTITY compiler-rt-download-http "http://llvm.org/releases/&rt-version;/compiler-rt-&rt-version;.src.tar.xz">
  <!ENTITY compiler-rt-md5sum        "b7ea34c9d744da16ffc0217b6990d095">
  <!ENTITY compiler-rt-size          "1.4 MB">
]>

<sect1 id="llvm" xreflabel="LLVM-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>

  <sect1info>
    <othername>$LastChangedBy$</othername>
    <date>$Date$</date>
  </sect1info>

  <title>LLVM-&llvm-version;</title>

  <indexterm zone="llvm">
    <primary sortas="a-LLVM">LLVM</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to LLVM</title>

    <para>
      The <application>LLVM</application> package contains a collection of
      modular and reusable compiler and toolchain technologies. The Low Level
      Virtual Machine (LLVM) Core libraries provide a modern source and
      target-independent optimizer, along with code generation support for many
      popular CPUs (as well as some less common ones!). These libraries are
      built around a well specified code representation known as the LLVM
      intermediate representation ("LLVM IR").
    </para>

    <para>
      The optional <application>Clang</application> and <application>Compiler
      RT</application> packages provide new C, C++, Objective C and Objective
      C++ front-ends and runtime libraries for the
      <application>LLVM</application>.
    </para>

<!--
    <note>
      <para>
        This package hits a bug in GCC-4.9.0 or an unpatched GCC-4.9.1.
        To build this package, GCC needs to be updated if you have one of
        these versions. See <xref linkend="gcc"/>
        for <application>gcc</application> installation instructions.
      </para>
    </note>
-->
    &lfs7a_checked;

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download (HTTP): <ulink url="&llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download (FTP): <ulink url="&llvm-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &llvm-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &llvm-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated build time: &llvm-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Optional Downloads</bridgehead>

      <bridgehead renderas="sect4">Clang</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&clang-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &clang-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
            Download size: &clang-size;
          </para>
        </listitem>
      </itemizedlist>

      <bridgehead renderas="sect4">Compiler RT</bridgehead>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Download: <ulink url="&compiler-rt-download-http;"/>
          </para>
        </listitem>
        <listitem>
          <para>
            Download MD5 sum: &compiler-rt-md5sum;
          </para>
        </listitem>
        <listitem>
          <para>
            Download size: &compiler-rt-size;
          </para>
        </listitem>
      </itemizedlist>

    <bridgehead renderas="sect3">LLVM Dependencies</bridgehead>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
<!-- autotools are obsolete and should not be used anymore. Cmake will be
     required for 3.9 -->
      <xref linkend="cmake"/>,
      <xref linkend="libffi"/>, and
      <xref linkend="python2"/>
    </para>

    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
      <xref linkend="doxygen"/>,
      <xref linkend="graphviz"/>,
      <xref linkend="libxml2"/>,
      <xref linkend="texlive"/> (or <xref linkend="tl-installer"/>),
      <xref linkend="valgrind"/>,
      <xref linkend="zip"/>,
      <ulink url="http://www.ocaml.org/">OCaml</ulink>, and
      <ulink url="http://pypi.python.org/pypi/Sphinx">Sphinx</ulink>
    </para>

    <para condition="html" role="usernotes">User Notes:
      <ulink url="&blfs-wiki;/llvm"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installation of LLVM</title>

    <para>
      If you have downloaded the optional packages, install them into
      the source tree by running the following commands:
    </para>

<screen><userinput>tar -xf ../cfe-&llvm-version;.src.tar.xz -C tools &amp;&amp;
tar -xf ../compiler-rt-&rt-version;.src.tar.xz -C projects &amp;&amp;

mv tools/cfe-&llvm-version;.src tools/clang &amp;&amp;
mv projects/compiler-rt-&rt-version;.src projects/compiler-rt</userinput></screen>

<!-- For 3.7.0: Now fixed at version 3.8.0
    <para>
      The run-time library needs to be fixed for 32 bit installations:
    </para>

<screen><userinput>sed -r "/ifeq.*CompilerTargetArch/s#i386#i686#g" \
    -i projects/compiler-rt/make/platform/clang_linux.mk</userinput></screen>
-->
    <para>
      Install <application>LLVM</application> by running the following
      commands:
    </para>

<!-- Not used in the build system
<screen><userinput>sed -e "s:/docs/llvm:/share/doc/llvm-&llvm-version;:" \
    -i Makefile.config.in &amp;&amp;
-->
<screen><userinput>mkdir -v build &amp;&amp;
cd       build &amp;&amp;

CC=gcc CXX=g++                              \
cmake -DCMAKE_INSTALL_PREFIX=/usr           \
      -DLLVM_ENABLE_FFI=ON                  \
      -DCMAKE_BUILD_TYPE=Release            \
      -DLLVM_BUILD_LLVM_DYLIB=ON            \
      -DLLVM_TARGETS_TO_BUILD="host;AMDGPU" \
      -Wno-dev ..                           &amp;&amp;
make</userinput></screen>

    <para>
      If you have installed <application>Sphinx</application> and wish
      to generate the html documentation and manual pages, issue the
      following commands:
    </para>
<screen><userinput>cmake -DLLVM_ENABLE_SPHINX=ON         \
      -DSPHINX_WARNINGS_AS_ERRORS=OFF \
      -Wno-dev ..                     &amp;&amp;
make docs-llvm-html  docs-llvm-man</userinput></screen>
    <para>
      If you have downloaded the optional packages, the clang documentation
      can be built too:
    </para>
<screen><userinput>make docs-clang-html docs-clang-man</userinput></screen>
    <para>
<!-- all tests pass for version 3.8.0-->
      To test the results, issue: <command>make check-all</command>.
      Note that the Address Sanitizer tests are known to fail currently.
<!--      Some tests may fail for unknown reasons.-->
    </para>

    <para>
      Now, as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>make install</userinput></screen>

    <para>
      If you have built  the documentation, install it by running the
      following command as the <systemitem class="username">root</systemitem>
      user:
    </para>

<screen role="root"><userinput>install -v -m644 docs/man/* /usr/share/man/man1             &amp;&amp;
install -v -d -m755 /usr/share/doc/llvm-&llvm-version;/llvm-html     &amp;&amp;
cp -Rv docs/html/* /usr/share/doc/llvm-&llvm-version;/llvm-html</userinput></screen>

    <para>
      The clang documentation can be installed in the same way (again as the
      <systemitem class="username">root</systemitem> user):
    </para>

<screen role="root"><userinput>install -v -m644 tools/clang/docs/man/* /usr/share/man/man1 &amp;&amp;
install -v -d -m755 /usr/share/doc/llvm-&llvm-version;/clang-html    &amp;&amp;
cp -Rv tools/clang/docs/html/* /usr/share/doc/llvm-&llvm-version;/clang-html</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <para>
      <parameter>-DLLVM_ENABLE_FFI=ON</parameter>: This switch enables
      <application>LLVM</application> to use
      <application>libffi</application>. Remove if you did not
      install <application>libffi</application>.
    </para>

    <para>
      <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>: builds libraries as
      static and links all of them into an unique shared one. This is the
      recommended way of building a shared library.
    </para>

    <para>
      <parameter>-DCMAKE_BUILD_TYPE=Release</parameter>: This switch enables
      compiler optimizations in order to speed up the code and reduce its size.
      It also disables some compile checks, not necessary on a production
      system.
    </para>

    <para>
      <parameter>-DLLVM_TARGETS_TO_BUILD="host;AMDGPU"</parameter>: This
      switch enables building for the same target as the host, and also for
      the r600 AMD GPU used by the Mesa r600 and radeonsi drivers. Default is
      all. You can use a semicolon separated list. Valid targets are: host,
      X86, Sparc, PowerPC, ARM, AArch64, Mips, Hexagon, Xcore, MSP430, NVPTX,
      SystemZ, AMDGPU, BPF, CppBackend, or all.
    </para>

    <para>
      <option>-DLLVM_LINK_LLVM_DYLIB=ON</option>: Used in conjunction with
      <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>, this switch enables
      linking the tools against the shared library instead of the static ones.
    </para>

    <para>
      <option>-DBUILD_SHARED_LIBS=ON</option>: if used instead of
      <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>, builds all the
      <application>LLVM</application> libraries (about 60) as shared
      libraries instead of static.
    </para>

    <para>
      <option>-DLLVM_ENABLE_DOXYGEN</option>: Enables the generation of
      browsable HTML documentation if you have installed <xref
      linkend="doxygen"/>. You should run <command>make doxygen-html</command>
      afterwards, and install the generated documentation manually.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          bugpoint, c-index-test, clang, clang++ (symlinks to
          clang-&lt;version&gt;), clang-&lt;version&gt;, clang-check, clang-cl,
          clang-format, git-clang-format,
          llc, lli, llvm-ar, llvm-as, llvm-bcanalyzer, llvm-config, llvm-cov,
          llvm-c-test, llvm-cxxdump, llvm-diff, llvm-dis, llvm-dsymutil,
          llvm-dwarfdump, llvm-dwp, llvm-extract, llvm-lib (symlink to
          llvm-ar), llvm-link, llvm-lto, llvm-mc, llvm-mcmarkup, llvm-nm,
          llvm-objdump, llvm-pdbdump, llvm-profdata, llvm-ranlib (symlink to
          llvm-ar), llvm-readobj, llvm-rtdyld, llvm-size, llvm-split,
          llvm-stress, llvm-symbolizer, llvm-tblgen, obj2yaml, opt, sancov,
          scan-build, scan-view, verify-uselistorder, and yaml2obj
        </seg>
        <seg>
          BugpointPasses.so,  LLVMHello.so, libLLVM.so, libLLVM*.a (57
          libraries), libLTO.so, libclang.so and libclang*.a (24 libraries)
        </seg>
        <seg>
          /usr/include/{clang,clang-c,llvm,llvm-c},
          /usr/lib/{clang,cmake/{clang,llvm}} and
          /usr/share/{clang,scan-build,scan-view,doc/llvm-&llvm-version;}
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bugpoint">
        <term><command>bugpoint</command></term>
        <listitem>
          <para>
            is the automatic test case reduction tool.
          </para>
          <indexterm zone="llvm bugpoint">
            <primary sortas="b-bugpoint">bugpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang">
        <term><command>clang</command></term>
        <listitem>
          <para>
            is the <application>Clang</application> C, C++,
            and Objective-C compiler.
          </para>
          <indexterm zone="llvm clang">
            <primary sortas="b-clang">clang</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-format">
        <term><command>clang-format</command></term>
        <listitem>
          <para>
            is a tool to format C/C++/Java/JavaScript/Objective-C/Protobuf
            code.
          </para>
          <indexterm zone="llvm clang-format">
            <primary sortas="b-clang-format">clang-format</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llc">
        <term><command>llc</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> static compiler.
          </para>
          <indexterm zone="llvm llc">
            <primary sortas="b-llc">llc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lli">
        <term><command>lli</command></term>
        <listitem>
          <para>
            is used to directly execute programs from
            <application>LLVM</application> bitcode.
          </para>
          <indexterm zone="llvm lli">
            <primary sortas="b-lli">lli</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ar">
        <term><command>llvm-ar</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> archiver.
          </para>
          <indexterm zone="llvm llvm-ar">
            <primary sortas="b-llvm-ar">llvm-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-as">
        <term><command>llvm-as</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> assembler.
          </para>
          <indexterm zone="llvm llvm-as">
            <primary sortas="b-llvm-as">llvm-as</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-bcanalyzer">
        <term><command>llvm-bcanalyzer</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> bitcode analyzer.
          </para>
          <indexterm zone="llvm llvm-bcanalyzer">
            <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-config">
        <term><command>llvm-config</command></term>
        <listitem>
          <para>
            Prints <application>LLVM</application> compilation options.
          </para>
          <indexterm zone="llvm llvm-config">
            <primary sortas="b-llvm-config">llvm-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cov">
        <term><command>llvm-cov</command></term>
        <listitem>
          <para>
            is used to emit coverage information.
          </para>
          <indexterm zone="llvm llvm-cov">
            <primary sortas="b-llvm-cov">llvm-cov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-c-test">
        <term><command>llvm-c-test</command></term>
        <listitem>
          <para>
            is a bytecode disassembler.
          </para>
          <indexterm zone="llvm llvm-c-test">
            <primary sortas="b-llvm-c-test">llvm-c-test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxdump">
        <term><command>llvm-cxxdump</command></term>
        <listitem>
          <para>
            is used as a C++ ABI Data Dumper.
          </para>
          <indexterm zone="llvm llvm-cxxdump">
            <primary sortas="b-llvm-cxxdump">llvm-cxxdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-diff">
        <term><command>llvm-diff</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> structural
            '<command>diff</command>'.
          </para>
          <indexterm zone="llvm llvm-diff">
            <primary sortas="b-llvm-diff">llvm-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dis">
        <term><command>llvm-dis</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> disassembler.
          </para>
          <indexterm zone="llvm llvm-dis">
            <primary sortas="b-llvm-dis">llvm-dis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dsymutil">
        <term><command>llvm-dsymutil</command></term>
        <listitem>
          <para>
            is a tool used to manipulate archived DWARF debug symbol files,
            compatible with the Darwin command <command>dsymutil</command>.
          </para>
          <indexterm zone="llvm llvm-dsymutil">
            <primary sortas="b-llvm-dsymutil">llvm-dsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwarfdump">
        <term><command>llvm-dwarfdump</command></term>
        <listitem>
          <para>
            prints the content of DWARF sections in object files.
          </para>
          <indexterm zone="llvm llvm-dwarfdump">
            <primary sortas="b-llvm-dwarfdump">llvm-dwarfdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwp">
        <term><command>llvm-dwp</command></term>
        <listitem>
          <para>
            merges split DWARF files.
          </para>
          <indexterm zone="llvm llvm-dwp">
            <primary sortas="b-llvm-dwp">llvm-dwp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-extract">
        <term><command>llvm-extract</command></term>
        <listitem>
          <para>
            is used to extract a function from an
            <application>LLVM</application> module.
          </para>
          <indexterm zone="llvm llvm-extract">
            <primary sortas="b-llvm-extract">llvm-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-link">
        <term><command>llvm-link</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> linker.
          </para>
          <indexterm zone="llvm llvm-link">
            <primary sortas="b-llvm-link">llvm-link</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lto">
        <term><command>llvm-lto</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> LTO (link time optimization)
            linker.
          </para>
          <indexterm zone="llvm llvm-lto">
            <primary sortas="b-llvm-lto">llvm-lto</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mc">
        <term><command>llvm-mc</command></term>
        <listitem>
          <para>
            is a standalone machine code assembler/disassembler.
          </para>
          <indexterm zone="llvm llvm-mc">
            <primary sortas="b-llvm-mc">llvm-mc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-nm">
        <term><command>llvm-nm</command></term>
        <listitem>
          <para>
            is used to list <application>LLVM</application> bitcode
            and object file's symbol table.
          </para>
          <indexterm zone="llvm llvm-nm">
            <primary sortas="b-llvm-nm">llvm-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-objdump">
        <term><command>llvm-objdump</command></term>
        <listitem>
          <para>
            is an <application>LLVM</application> object file dumper.
          </para>
          <indexterm zone="llvm llvm-objdump">
            <primary sortas="b-llvm-objdump">llvm-objdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-pdbdump">
        <term><command>llvm-pdbdump</command></term>
        <listitem>
          <para>
            is used as PDB Dumper.
          </para>
          <indexterm zone="llvm llvm-pdbdump">
            <primary sortas="b-llvm-pdbdump">llvm-pdbdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-profdata">
        <term><command>llvm-profdata</command></term>
        <listitem>
          <para>
            is a small tool to manipulate and print profile data files.
          </para>
          <indexterm zone="llvm llvm-profdata">
            <primary sortas="b-llvm-profdata">llvm-profdata</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ranlib">
        <term><command>llvm-ranlib</command></term>
        <listitem>
          <para>
            is used to generate an index for a <application>LLVM</application>
            archive.
          </para>
          <indexterm zone="llvm llvm-ranlib">
            <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-readobj">
        <term><command>llvm-readobj</command></term>
        <listitem>
          <para>
            displays low-level format-specific information about object files.
          </para>
          <indexterm zone="llvm llvm-readobj">
            <primary sortas="b-llvm-readobj">llvm-readobj</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-rtdyld">
        <term><command>llvm-rtdyld</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> MC-JIT tool.
          </para>
          <indexterm zone="llvm llvm-rtdyld">
            <primary sortas="b-llvm-rtdyld">llvm-rtdyld</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-size">
        <term><command>llvm-size</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> object size dumper.
          </para>
          <indexterm zone="llvm llvm-size">
            <primary sortas="b-llvm-size">llvm-size</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-split">
        <term><command>llvm-split</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> module splitter.
          </para>
          <indexterm zone="llvm llvm-split">
            <primary sortas="b-llvm-split">llvm-split</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-stress">
        <term><command>llvm-stress</command></term>
        <listitem>
          <para>
            is used to generate random
            <filename class="extension">.ll</filename> files.
          </para>
          <indexterm zone="llvm llvm-stress">
            <primary sortas="b-llvm-stress">llvm-stress</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-symbolizer">
        <term><command>llvm-symbolizer</command></term>
        <listitem>
          <para>
            converts adresses into source code locations.
          </para>
          <indexterm zone="llvm llvm-symbolizer">
            <primary sortas="b-llvm-symbolizer">llvm-symbolizer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-tblgen">
        <term><command>llvm-tblgen</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> Target Description
            To C++ Code Generator.
          </para>
          <indexterm zone="llvm llvm-tblgen">
            <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="obj2yaml">
        <term><command>obj2yaml</command></term>
        <listitem>
          <para>
            takes an object file,and produces a YAML representation of the
            file.
          </para>
          <indexterm zone="llvm obj2yaml">
            <primary sortas="b-obj2yaml">obj2yaml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="opt">
        <term><command>opt</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> optimizer.
          </para>
          <indexterm zone="llvm opt">
            <primary sortas="b-opt">opt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sancov">
        <term><command>sancov</command></term>
        <listitem>
          <para>
            is the sanitizer coverage processing tool.
          </para>
          <indexterm zone="llvm sancov">
            <primary sortas="b-sancov">sancov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-build">
        <term><command>scan-build</command></term>
        <listitem>
          <para>
            is a <application>Perl</application> script that invokes the
            <application>Clang</application> static analyzer.
          </para>
          <indexterm zone="llvm scan-build">
            <primary sortas="b-scan-build">scan-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-view">
        <term><command>scan-view</command></term>
        <listitem>
          <para>
            is a viewer for <application>Clang</application> static analyzer
            results.
          </para>
          <indexterm zone="llvm scan-view">
            <primary sortas="b-scan-view">scan-view</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="verify-uselistorder">
        <term><command>verify-uselistorder</command></term>
        <listitem>
          <para>
            is the <application>LLVM</application> tool to verify use-list
            order.
          </para>
          <indexterm zone="llvm verify-uselistorder">
            <primary sortas="b-verify-uselistorder">verify-uselistorder</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="yaml2obj">
        <term><command>yaml2obj</command></term>
        <listitem>
          <para>
            takes a YAML representation of an object file and converts it
            to an binary file.
          </para>
          <indexterm zone="llvm yaml2obj">
            <primary sortas="b-yaml2obj">yaml2obj</primary>
          </indexterm>
        </listitem>
      </varlistentry>
<!--
      <varlistentry id="libllvm">
        <term><filename class="libraryfile">libLLVM-&llvm-version;.so</filename></term>
        <listitem>
          <para>
            contains the <application>LLVM</application> API functions.
          </para>
          <indexterm zone="llvm libllvm">
            <primary sortas="c-libllvm">libLLVM-&llvm-version;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libprofile_rt">
        <term><filename class="libraryfile">libprofile_rt.so</filename></term>
        <listitem>
          <para>
            is the C, C++ and Objective-C runtime library for
            <application>Clang</application>.
          </para>
          <indexterm zone="llvm libprofile_rt">
            <primary sortas="c-libprofile_rt">libprofile_rt.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->

    </variablelist>

  </sect2>

</sect1>
