<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY soprano-download-http "&sourceforge-repo;/soprano/soprano-&soprano-version;.tar.bz2">
  <!ENTITY soprano-download-ftp  " ">
  <!ENTITY soprano-md5sum        "273c3403aeb6d8a43e78a4887f50a385">
  <!ENTITY soprano-size          "1.9 MB">
  <!ENTITY soprano-buildsize     "23 MB">
  <!ENTITY soprano-time          "0.6 SBU">
]>

<sect1 id="soprano" xreflabel="soprano-&soprano-version;">
  <?dbhtml filename="soprano.html"?>

  <sect1info>
    <othername>$LastChangedBy$</othername>
    <date>$Date$</date>
  </sect1info>

  <title>Soprano-&soprano-version;</title>

  <indexterm zone="soprano">
    <primary sortas="a-soprano">soprano</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to Soprano</title>

    <para><application>Soprano</application> (formally known as QRDF) is a 
    library which provides a nice Qt interface to RDF storage solutions. It 
    has a modular structure which allows to  replace the actual RDF storage 
    implementation used.</para>

    &lfs71_checked;

    <bridgehead renderas="sect3">Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>Download (HTTP): <ulink url="&soprano-download-http;"/></para>
      </listitem>
      <listitem>
        <para>Download (FTP): <ulink url="&soprano-download-ftp;"/></para>
      </listitem>
      <listitem>
        <para>Download MD5 sum: &soprano-md5sum;</para>
      </listitem>
      <listitem>
        <para>Download size: &soprano-size;</para>
      </listitem>
      <listitem>
        <para>Estimated disk space required: &soprano-buildsize;</para>
      </listitem>
      <listitem>
        <para>Estimated build time: &soprano-time;</para>
      </listitem>
    </itemizedlist>
<!--
no longer required in 4.6
    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing='compact'>
      <listitem>
        <para>Required patch: <ulink
        url="&equinox-download;/soprano-&soprano-version;-redland_fix-1.patch"/></para>
      </listitem>
    </itemizedlist>
-->
    <bridgehead renderas="sect3">Soprano Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
    <xref linkend="cmake"/>, 
    <xref linkend="qt"/>, 
    <xref linkend="dbus"/> and
    <xref linkend="redland"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
    <xref linkend="libiodbc"/> (required for the Virtuoso backend. Additionally, 
    <xref linkend="virtuoso"/> is required as a runtime dependency for this 
    backend.)
    </para>
    
    <bridgehead renderas="sect4">Optional</bridgehead>
    <para role="optional">
    <xref linkend="doxygen"/> (to build the documentation), 
    <ulink url="http://sourceforge.net/projects/clucene/">CLucene</ulink>
    (no longer required to use soprano in KDE) and 
    <ulink url="http://www.openrdf.org/">Sesame2</ulink>
    </para>

    <para condition="html" role="usernotes">User Notes:
    <ulink url="&blfs-wiki;/soprano"/></para>

  </sect2>

  <sect2 role="installation">
    <title>Installation of Soprano</title>

    <para>Install <application>soprano</application> by running the following
    commands:</para>

<screen><userinput>mkdir build &amp;&amp;
cd build &amp;&amp;
cmake -DCMAKE_INSTALL_PREFIX=/usr .. &amp;&amp;
make</userinput></screen>

    <para>Now, as the <systemitem class="username">root</systemitem> user:</para>

<screen role="root"><userinput>make install</userinput></screen>

</sect2>
  <sect2 role="commands">
    <title>Command Explanations</title>

    <para><option>-DSOPRANO_DISABLE_CLUCENE_INDEX=1</option>: Soprano might not 
    build with recent Clucene versions. Use this option to fix it.</para>

  </sect2>
  
  <sect2 role="configuration">
    <title>Configuration of Soprano</title>

    <para>Create a directory where <application>soprano</application> places some
    runtime data:</para>
    
<screen role="root"><userinput>install -m755 -d /srv/soprano</userinput></screen>

    <para>The <application>soprano</application>d accepts some parameter. To not
    hardcode them in the startscript, create a configuration file:</para>

<screen role="root"><userinput>cat &gt; /etc/sysconfig/soprano &lt;&lt;EOF
# Begin /etc/sysconfig/soprano

SOPRANO_STORAGE="/srv/soprano"
SOPRANO_BACKEND="virtuoso"                       # virtuoso, sesame2, redland
#SOPRANO_OPTIONS="$SOPRANO_OPTIONS --port 4711"  # Default port is 5000

# End /etc/sysconfig/soprano
EOF</userinput></screen>


<sect3 id="soprano-init">
      <title>Boot Script</title>

      <note>
      <para>It is not required to start the soprano server at boottime for KDE. 
      KDE will start soprano as needed.</para>
      </note>
      
      <para>In order to get <application>Soprano</application> started
      automatically when the system is booted, install the
      <filename>/etc/rc.d/init.d/soprano</filename> init script included
      in the <xref linkend="bootscripts"/> package.</para>

      <indexterm zone="soprano soprano-init">
        <primary sortas="f-soprano">soprano</primary>
      </indexterm>

<screen role="root"><userinput>make install-soprano</userinput></screen>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>sopranod, sopranocmd and onto2vocabularyclass</seg>
        <seg>libsoprano.so, libsopranoclient.so, libsopranoserver.so and
        several libraries in /usr/lib/soprano/</seg>
	<seg>/usr/include/soprano, /usr/include/Soprano and /usr/share/soprano</seg>
      </seglistitem>
    </segmentedlist>
<!--
    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="a-soprano">
        <term><command>soprano</command></term>
        <listitem>
          <para>is a testing utility for soprano-generated build trees.</para>
          <indexterm zone="a-soprano soprano">
            <primary sortas="b-soprano">soprano</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>
-->
  </sect2>

</sect1>
